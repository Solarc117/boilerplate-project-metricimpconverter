“The most difficult thing is the decision to act; the rest is merely tenacity.” - Amelia Earhart

<------ Problem Solving Steps from Fireship --------->

1. Identify 
  - definte the issue
  - definte the context
  - why do we care to solve it?
2. Research & Define 
  - Google the problem; you're likely not the first one
  - Discuss w/other devs
  - Break problem down into smaller tasks
  - Determine what tools & apis to use 
3. Pseudo-code
  - how do we implement our code?
  - don't worry about syntax
  - can write pseudo-code in a lang, if you're comfortable enough w/it
4. (optional) Test-Driven Development
  - Consider using Jest (a JS testing library)
  - Red, green, refactor process:
    a) write failing tests that describe what you're trying to do
    b) write code that makes your tests pass
    c) refactor/optimize tests/code
  - good specs help you catch issues much quicker than you could debug them
5. Implement Code
  - try to implement the first working prototype as quickly as possible: try to treat it like a hackathon & don't worry about the quality of the code
    * refactoring and cleaning imperfect code is easier than writing clean code from the get-go
6. Relax, sleep, & reflect on the code
  - take a break if you're stuck!
  - a few suggestions to improve code:
    a) improve readability
    b) add useful comments
    c) remove duplication
    d) optimize time/space complexities
    e) add error handling
    f) add caching
7. Keep practicing! Get feedback from other devs.

<!-------------------- END ------------------------->

📄 I should consider adding messages to assertions (ex. assert.strictEquals(var, expect, MESSAGE)) if it improves readability and is worth the time investment.
📄 I think, ultimately, what will matter more in terms of getting me a dev job will be what I have to show in terms of projects; not so much my fCC certifications. 
📄 render works with templates, like pug. The sendFile method sends file as is.
📄 I might want to read into client.close(); I don't remember that method from my mdbu courses.
📄 difference between req.body, req.query, and req.params:
  📄 req.body is what usually contains the majority of information relevant to the request
  📄 query contains the '...?KEY=VALUE' pairs of a path
  📄 params contain sections of the url that are mapped to certain variables, e.g. 'api/issues/:owner', req.param would contain a variable "owner" with the value pertaining to the string that was in the respective url position at the time of the request. 
📄 be wary of spaghetti code; functions that call other functions in a disorderly manner. Won't worry about it now, but just be wary.
📄 Unfinished tasks from issue-tracker:
  ● remove index properties from documents
  ● create a test that deletes the FIRST, and LAST element of a document
  ● review all method documentation
  ● style issue-tracker's index page
  ● verify all issues posted have created_on and last_updated properties

✨ ways to optimize learning that I should remember:
    ● take short, mind-wandering breaks apart from ultradian breaks
    ● use temperature-minimum to estimate ultradian breaks for the day
    ● angle screen upward to trigger alertness
    ● consciously try to blink less
    ● do productive breaks during ultradian breaks (raise adrenalin, then: NSDR, walk, talk to someone, etc.)
    ● implement perceptible, non-intrusive white noise during learning
    ● MINIMIZE DISTRACTIONS
    ● do not write maintainable, clean code until the first working prototype is done; similar to writing, it is much easier to clean up dirty code than it is to write clean code from the get-go.

      PERSONAL LIBRARY DEADLINE: Friday, August 19th, 22:00

book document schema: {
  _id: ObjectId,
  title: string,
  commentcount: number,
  comments: [string],
}

Functionality:
  API:
  - respond to GET requests to /api/books with an array containing ALL book documents
  - respond to POST requests to /api/books, with a body containing the book's title, with the book's title and _id
  - respond to POST requests to /api/books/:_id (with a body containing the comment text) with the updated book document

  HTML 1:
  - ensure the Test post /api/books form redirects to the same path, and returns { _id, title }
  - ensure the Test post /api/books/_id form redirects to the same path, and returns { _id, title, commentscount, comments }
  HTML 2:
  - ensure the ul below the second Post Book form is always showing the updated list of books, and the number of comments per book
  - ensure clicking on a li element changes the bookDetail div from "select a book" to illustrating all of the book's info, including a form to add comments OR delete the book
  - ensure the "delete all books" button at the very bottom works

------------------ ✅Thu, Aug 11 ------------------

  - ✅ Setup main HTML page
  - ✅ Setup Handler file
 
------------------ ✅Fri, Aug 12 -----------------------

  - ✅ Setup DAO file (and database)
  - ✅ commit & push
  - ✅ create mongodb book schema
 
------------------ ✅Sat, Aug 13 -----------------------

  - ✅ create GET /api/books test
  - ✅ commit & push
  - ✅ pass test above
  - ✅ commit & push
  - ✅ create POST /api/books test (valid and invalid doc)
  - ✅ commit & push
 
------------------ ✅Sun, Aug 14 -----------------------

  - ✅ pass test above
  - ✅ commit & push
  - ✅ create POST /api/books/_id test
    - ✅ figure out how the comment information will be passed from the html to the POST /api/books/_id handler
  - ✅ commit & push
 
------------------ 📌 Mon, Aug 15 -----------------------

  - ✅ only submit the comment in the body for POST /api/books/:_id requests
  - ✅ commit & push
  - ✅ pass test #1
    - ✅ fix comment(s)count bug (there should only be a commentcount property, NOT commentScount)
  - ✅ commit & push
  - ✅ make a form test for the second Post Book form (assure the book posted is displayed in the ul upon submittal)
    - ✅ install zombie
  - 📌 commit & push
 
------------------ Tue, Aug 16 -----------------------

  - pass test above
  - commit & push
  - make a "click" test on a li element (ensure #bookDetail div displays accurate information after clicking)
  - commit & push
  - pass test above
  - commit & push
 
------------------ Wed, Aug 17 -----------------------

  - make a form test for the #bookDetail "addcomment" and "deletebook" buttons
  - commit & push
  - pass test above
  - commit & push
 
------------------ Thu, Aug 18 -----------------------

  - make a form test for the bottom "delete all books" button
  - commit & push
  - pass test above
  - commit & push
  - check for and fix any missing functionality and bugs
 
------------------ Fri, Aug 19 (DEADLINE) -----------------------

  - deploy to heroku
  - test heroku manually
  - make and complete tasklist for last day (what needs to get cleaned up?)
 
