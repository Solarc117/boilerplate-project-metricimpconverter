“The most difficult thing is the decision to act; the rest is merely tenacity.” - Amelia Earhart

<------ Problem Solving Steps from Fireship --------->

1. Identify 
  - definte the issue
  - definte the context
  - why do we care to solve it?
2. Research & Define 
  - Google the problem; you're likely not the first one
  - Discuss w/other devs
  - Break problem down into smaller tasks
  - Determine what tools & apis to use 
3. Pseudo-code
  - how do we implement our code?
  - don't worry about syntax
  - can write pseudo-code in a lang, if you're comfortable enough w/it
4. (optional) Test-Driven Development
  - Consider using Jest (a JS testing library)
  - Red, green, refactor process:
    a) write failing tests that describe what you're trying to do
    b) write code that makes your tests pass
    c) refactor/optimize tests/code
  - good specs help you catch issues much quicker than you could debug them
5. Implement Code
  - try to implement the first working prototype as quickly as possible: try to treat it like a hackathon & don't worry about the quality of the code
    * refactoring and cleaning imperfect code is easier than writing clean code from the get-go
6. Relax, sleep, & reflect on the code
  - take a break if you're stuck!
  - a few suggestions to improve code:
    a) improve readability
    b) add useful comments
    c) remove duplication
    d) optimize time/space complexities
    e) add error handling
    f) add caching
7. Keep practicing! Get feedback from other devs.

<!-------------- END -------------->

📄 Notes:
  📄 I should consider adding messages to assertions (ex. assert.strictEquals(var, expect, MESSAGE)) if it improves readability and is worth the time investment.
  📄 I think, ultimately, what will matter more in terms of getting me a dev job will be what I have to show in terms of projects; not so much my fCC certifications. 
  📄 render works with templates, like pug. The sendFile method sends file as is.
  📄 I might want to read into client.close(); I don't remember that method from my mdbu courses.
  📄 difference between req.body, req.query, and req.params:
    📄 req.body is what usually contains the majority of information relevant to the request
    📄 query contains the '...?KEY=VALUE' pairs of a path
    📄 params contain sections of the url that are mapped to certain variables, e.g. 'api/issues/:owner', req.param would contain a variable "owner" with the value pertaining to the string that was in the respective url position at the time of the request. 
  📄 be wary of spaghetti code; functions that call other functions in a disorderly manner. Won't worry about it now, but just be wary.
  📄 Unfinished tasks from issue-tracker:
    ● remove index properties from documents
    ● create a test that deletes the FIRST, and LAST element of a document
    ● review all method documentation
    ● style issue-tracker's index page
    ● verify all issues posted have created_on and last_updated properties
  📄 I should try to make tests independent; if a test is dependent on an action, ex. submits a document, then attempts to modify it, both actions should fall within the same document, instead of having the first action in test #1, and the second in test #2, for example. This would allow for more efficient troubleshotting/debugging.

✨ ways to optimize learning that I should remember:
    ● take short, mind-wandering breaks apart from ultradian breaks
    ● use temperature-minimum to estimate ultradian breaks for the day
    ● angle screen upward to trigger alertness
    ● consciously try to blink less
    ● do productive breaks during ultradian breaks (raise adrenalin, then: NSDR, walk, talk to someone, etc.)
    ● implement perceptible, non-intrusive white noise during learning
    ● MINIMIZE DISTRACTIONS
    ● do not write maintainable, clean code until the first working prototype is done; similar to writing, it is much easier to clean up dirty code than it is to write clean code from the get-go.

  SUDOKU DEADLINE: Friday, August 26th

Rules:
  1. Numbers may not be repeated in a column.
  2. Numbers may not be repeated in a row.
  3. Numbers may not be repeated in a grid (3x3).

📄 For each of the following tasks, I need to write a test BEFORE coding, unless it's a commit task.

--------------- Sun, Aug 28

  1. ✅ Fix sudoku input browser tests
    📄 I understand that fixing this bug in the short term is detrimental to my progress, because when I test my site's functionality manually, it works, despite the test saying it doesn't. But that's not why I'm building these projects. I'm building these projects to LEARN tdd, for when I actually build something I intend to use. These tests have great potential to speed up my workflow, and working on them is helping me understand web development better, so in the long term it's BETTER for me to figure out this bug, instead of working around it. ALTHOUGH it might be fine to work around it, as that might help me understand this bug.
    - 📌 check why fillSudoku is not running properly (pausing on browser.visit shows none of the sudoku td's have been filled)
      ✅ check if textarea has the default value
        IT DOES!
  ✅ Commit & push
  2. ✅ Verify valid textArea input (assert the three rules above) upon user input
    📄 Also to prevent cross-site scripting attempts.
    📄 I would like to toggle a class "valid" or "invalid" on the textarea, and add a red or green border depending on that
  3. ✅ Verify valid Coordinate and Value input (2 chars: letter, and 1-9 number) (1-9)
  ✅ Commit & push

--------------- Mon/Tue, Aug 29th/30th

  4. ✅ Fix failing tests
  5. ✅ Align letters with board
  6. ✅ Clear Sudoku inputs as textArea inputs are deleted
  7. ✅ Describe handler check method functionality
  8. ✅ Code handler check method
    ✅ I'll edit my columns, rows, and grids methods to accept an optional parameter specifying WHICH row/column/grid to return.
    If none, 
      it just returns an array with all.
    ✅ Then, I'll use those modifications to return ONLY the row, column and grid of the passed coordinate. 
    ✅ I'll make the validArea function a static method, so I can use it in the check method
    If there are any conflicts in an area, 
      it is added to the "conflicts" array that will be returned.
    ✅ If the "conflicts" array has at least one item, 
      valid is false, and the array is returned. 
    Otherwise, 
      valid is true and conflicts is instead set to null.
  8.5. ✅ fix failing test
  9. 📌 Describe handler solve method functionality
  - Commit & push
  10. Code handler solve method
  - Commit & push

--------------- Wed, Sep 1

  11. Format api responses properly
  - Commit & push
  12. Look for any bugs or missing functionality 
  13. Finish tasks above
  - Commit & push
  14. Merge with main, test heroku site