<------ Problem Solving Steps from Fireship --------->

1. Identify 
  - definte the issue
  - definte the context
  - why do we care to solve it?
2. Research & Define 
  - Google the problem; you're likely not the first one
  - Discuss w/other devs
  - Break problem down into smaller tasks
  - Determine what tools & apis to use 
3. Pseudo-code
  - how do we implement our code?
  - don't worry about syntax
  - can write pseudo-code in a lang, if you're comfortable enough w/it
4. (optional) Test-Driven Development
  - Consider using Jest (a JS testing library)
  - Red, green, refactor process:
    a) write failing tests that describe what you're trying to do
    b) write code that makes your tests pass
    c) refactor/optimize tests/code
  - good specs help you catch issues much quicker than you could debug them
5. Implement Code
  - try to implement the first working prototype as quickly as possible: try to treat it like a hackathon & don't worry about the quality of the code
    * refactoring and cleaning imperfect code is easier than writing clean code from the get-go
6. Relax, sleep, & reflect on the code
  - take a break if you're stuck!
  - a few suggestions to improve code:
    a) improve readability
    b) add useful comments
    c) remove duplication
    d) optimize time/space complexities
    e) add error handling
    f) add caching
7. Keep practicing! Get feedback from other devs.

<!-------------------- END ------------------------->


📄⬇️ play around with different properties of res to use to verify a proper response
📄It would be neat to have a "full response" method in ConvertHandler that draws from its own methods to return all the properties that a response object would be expected to have, and call THAT method in the api file, instead of defining each property individually and returning an anonymous object with all of those properties.
📄I should consider adding messages to assertions (ex. assert.strictEquals(var, expect, MESSAGE)) if it improves readability and is worth the time investment.
📄I think, ultimately, what will matter more in terms of getting me a dev job will be what I have to show in terms of projects; not so much my fCC certifications. Therefore, I should make verifying fcctesting.js works my last task - still would be nice to get that certification, though, so I do still wanna see if it's doable within a reasonable amount of time.
📄render works with templates, like pug. sendFile sends file as is.
📄Should look up what my brother said about views being automatic, & why it doesn't work on this project.
📄Might wanna consider isolating separate api method handlers to their own files, and just invoke them all in the api.js file (ex. issue-tracker-api.js, metric-imperial-api.js, and require them)
📄In order to continue doing TDD, I should have a sign-in form, and set up tests for the database, form, & api
📄I should wait on impementing mdb until I SEE that I need it.
📄 I might want to read into client.close(); I don't remember that method from my mdbu courses.

✨ ways to optimize learning that I should remember:
  - take short, mind-wandering breaks apart from ultradian breaks
  - use bedtime to estimate ultradian breaks for the day (TODAY: 09:00)
  - angle screen upward to trigger alertness
  - consciously try to blink less
  - do productive breaks during ultradian breaks (raise adrenalin, then: NSDR, walk, talk to someone, etc.)
  - implement perceptible, non-intrusive white noise during learning
  - MINIMIZE DISTRACTIONS
  - do not write maintainable, clean code until the first working prototype is done; similar to writing, it is much easier to clean up dirty code than it is to write clean code from the get-go.

- ✅ color code different test files
- 🎉 what is req.body for, and what is req.query for?
  📄 req.body is what 

- ⚒️ Red, green, refactor; all of the functional tests in tests/issue-tracker.test.js:
  -  Create an issue with every field: POST request to /api/issues/{project}
  - Create an issue with only required fields: POST request to /api/issues/{project}
  - Create an issue with missing required fields: POST request to /api/issues/{project}
  - View issues on a project: GET request to /api/issues/{project}
  - View issues on a project with one filter: GET request to /api/issues/{project}
  - View issues on a project with multiple filters: GET request to /api/issues/{project}
  - Update one field on an issue: PATCH request to /api/issues/{project}
  - Update multiple fields on an issue: PATCH request to /api/issues/{project}
  - Update an issue with missing _id: PATCH request to /api/issues/{project}
  - Update an issue with no fields to update: PATCH request to /api/issues/{project}
  - Update an issue with an invalid _id: PATCH request to /api/issues/{project}
  - Delete an issue: DELETE request to /api/issues/{project}
  - Delete an issue with an invalid _id: DELETE request to /api/issues/{project}
  - Delete an issue with missing _id: DELETE request to /api/issues/{project}

- ⚒️ Complete the necessary routes in /routes/api.js for the /api/issues/{project}?open=true&assigned_to=Joe route:
  - get an issue, with the option to filter using asignees, reactions, or other things
  - post
  - PATCH
  - delete (alert user that gh rest api does not include this func)

- style issue-tracker's index page
- add navbar to issue-tracker
- compare fccTestingRoutes