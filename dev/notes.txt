<------ Problem Solving Steps from Fireship --------->

1. Identify 
  - definte the issue
  - definte the context
  - why do we care to solve it?
2. Research & Define 
  - Google the problem; you're likely not the first one
  - Discuss w/other devs
  - Break problem down into smaller tasks
  - Determine what tools & apis to use 
3. Pseudo-code
  - how do we implement our code?
  - don't worry about syntax
  - can write pseudo-code in a lang, if you're comfortable enough w/it
4. (optional) Test-Driven Development
  - Consider using Jest (a JS testing library)
  - Red, green, refactor process:
    a) write failing tests that describe what you're trying to do
    b) write code that makes your tests pass
    c) refactor/optimize tests/code
  - good specs help you catch issues much quicker than you could debug them
5. Implement Code
  - try to implement the first working prototype as quickly as possible: try to treat it like a hackathon & don't worry about the quality of the code
    * refactoring and cleaning imperfect code is easier than writing clean code from the get-go
6. Relax, sleep, & reflect on the code
  - take a break if you're stuck!
  - a few suggestions to improve code:
    a) improve readability
    b) add useful comments
    c) remove duplication
    d) optimize time/space complexities
    e) add error handling
    f) add caching
7. Keep practicing! Get feedback from other devs.

<!-------------------- END ------------------------->


📄 I should consider adding messages to assertions (ex. assert.strictEquals(var, expect, MESSAGE)) if it improves readability and is worth the time investment.
📄 I think, ultimately, what will matter more in terms of getting me a dev job will be what I have to show in terms of projects; not so much my fCC certifications. 
📄 render works with templates, like pug. The sendFile method sends file as is.
📄 should consider looking up what my brother said about views being automatic, & why it doesn't work on this project.
📄 I might want to read into client.close(); I don't remember that method from my mdbu courses.
📄 do I need to drop the collection? Or would it be simpler to send a put request for every document that I will need (e.g. if there are two DELETE tests, I can send two PUT requests for every DELETE test)? I think the second will be easier.

✨ ways to optimize learning that I should remember:
  - take short, mind-wandering breaks apart from ultradian breaks
  - use bedtime to estimate ultradian breaks for the day
  - angle screen upward to trigger alertness
  - consciously try to blink less
  - do productive breaks during ultradian breaks (raise adrenalin, then: NSDR, walk, talk to someone, etc.)
  - implement perceptible, non-intrusive white noise during learning
  - MINIMIZE DISTRACTIONS
  - do not write maintainable, clean code until the first working prototype is done; similar to writing, it is much easier to clean up dirty code than it is to write clean code from the get-go.

- ✅ what is the difference between req.body, req.query, and req.params?
  📄 req.body is what usually contains the majority of information relevant to the request
  📄 query contains the '...?KEY=VALUE' pairs of a path
  📄 params contain sections of the url that are mapped to certain variables, e.g. 'api/issues/:owner', req.param would contain a variable "owner" with the value pertaining to the string that was in the respective url position at the time of the request. 

- ⚒️🎉 Red, green, refactor; all of the functional tests in tests/issue-tracker.test.js:
  - ✅ Create an issue with every field: POST request to /api/issues/:project
  - ✅ commit & push
  - ✅ Create an issue with only required fields: POST request to /api/issues/{project}
    - ✅ Fill in null for any optional fields that are not filled in, and respond with a status of 400 (bad req) and a corresponding message if any required fields are not their respective types.
  - ✅ commit & push
  - ✅ Create an issue with missing required fields: POST request to /api/issues/{project}
  - ✅ commit & push
  - ✅ View issues on a project: GET request to /api/issues/{project}
    - ✅ modify GET handler to only return the issues array
  - 🎉 commit & push
  - View issues on a project with one filter: GET request to /api/issues/{project}
  - commit & push
  - View issues on a project with multiple filters: GET request to /api/issues/{project}
  - commit & push
  - Update one field on an issue: PATCH request to /api/issues/{project}
  - commit & push
  - Update multiple fields on an issue: PATCH request to /api/issues/{project}
  - commit & push
  - Update an issue with missing _id: PATCH request to /api/issues/{project}
  - commit & push
  - Update an issue with no fields to update: PATCH request to /api/issues/{project}
  - commit & push
  - Update an issue with an invalid _id: PATCH request to /api/issues/{project}
  - commit & push
  - Delete an issue: DELETE request to /api/issues/{project}
  - commit & push
  - Delete an issue with an invalid _id: DELETE request to /api/issues/{project}
  - commit & push
  - Delete an issue with missing _id: DELETE request to /api/issues/{project}

- ⚒️ Complete the necessary routes in /routes/api.js for the /api/issues/{project}?open=true&assigned_to=Joe route:
  - get an issue, with the option to filter using asignees, reactions, or other things
  - post
  - PATCH
  - delete 

- check if _id should be a required, or optional property of Project objects.
- ensure method documentation return types are consistent with the actual return types
- style issue-tracker's index page
- add navbar to issue-tracker
- compare fccTestingRoutes
