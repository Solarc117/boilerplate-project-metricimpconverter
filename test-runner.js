/*
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *       DO NOT EDIT THIS FILE
 *       For FCC testing purposes!
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

const analyser = require('./assertion-analyser'),
  { EventEmitter } = require('events'),
  Mocha = require('mocha'),
  fs = require('fs'),
  path = require('path'),
  mocha = new Mocha(),
  testDir = './tests'

// Add each .js file to the mocha instance
fs.readdirSync(testDir)
  .filter(file => {
    const last3Chars = file.substring(file.length - 3, file.length)
    console.log('last3Chars:', last3Chars)
    return last3Chars === '.js'
  })
  .forEach(file => mocha.addFile(path.join(testDir, file)))

const emitter = new EventEmitter()
// @ts-ignore
emitter.run = function () {
  let tests = [],
    context = '',
    separator = ' -> '

  try {
    console.log(mocha.files)
    mocha
      .ui('tdd')
      .run()
      // Deconstructured from test
      .on('test end', ({ body, title, state }) => {
        // remove comments
        body = body.replace(/\/\/.*\n|\/\*.*\*\//g, '')
        // collapse spaces
        body = body.replace(/\s+/g, ' ')

        tests.push({
          title,
          context: context.slice(0, -separator.length),
          state,
          // body: body,
          assertions: analyser(body),
        })
      })
      .on('end', function () {
        // @ts-ignore
        emitter.report = tests
        emitter.emit('done', tests)
      })
      .on('suite', function (s) {
        context += s.title + separator
      })
      .on('suite end', function (s) {
        context = context.slice(0, -(s.title.length + separator.length))
      })
  } catch (e) {
    throw e
  }
}

module.exports = emitter

/*
 * Mocha.runner Events:
 * can be used to build a better custom report
 *
 *   - `start`  execution started
 *   - `end`  execution complete
 *   - `suite`  (suite) test suite execution started
 *   - `suite end`  (suite) all tests (and sub-suites) have finished
 *   - `test`  (test) test execution started
 *   - `test end`  (test) test completed
 *   - `hook`  (hook) hook execution started
 *   - `hook end`  (hook) hook complete
 *   - `pass`  (test) test passed
 *   - `fail`  (test, err) test failed
 *   - `pending`  (test) test pending
 */
